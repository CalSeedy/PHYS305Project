package runsimulation;

import java.io.IOException;
import java.io.PrintWriter;

// Data class that handles the storage and output of the data generated by the
// simulation
public class Data {
    // example data are poitions as a function of time
    // define the positions and times arrays
    public double[][] positions;
    public double[] times;
    
    // constructor takes in the number of values that are to be stored (i.e. iterations of Euler or RK4)
    // and the timestep (to keep time intervals constant)
    public Data(int values, double timestep){
        // intiialise arrays with the correct dimensions
        positions = new double[values][3];
        double[] ts = new double[values];
        // set all the time values, since they are constant
        for (int i = 0; i < values; i++){
            ts[i] = i*timestep;
        }
        // overwrite the stored array of times
        times = ts;
    }
    
    
    // method to add some position data at some index, where index is the integer
    // multiple of the timestep
    public void addData(double x, double y, double z, int index){
        positions[index][0] = x;
        positions[index][1] = y;
        positions[index][2] = z;
    }
    
    // method that dumps all the position data into the console 
    public void output(){
        int i = 0;
        for (double[] pos : positions){
            System.out.println(String.format("Position: {%g, %g, %g} m, at t = %g s", pos[0], pos[1], pos[2], times[i]));
            i++;
        }
    }
    
    // method to create a CSV file with a desired filename and all of the stored data
    public void writeToCSV(String filename){
        // initialise a stream to write to a file and call it outputFile
        PrintWriter outputFile;
        try {
            // try to create an instance of the stream (creates the CSV file)
            outputFile = new PrintWriter(filename);
        } catch (IOException e) {
            // if there is a problem creating the file, print out an error message and exit
            System.err.println("Failed to open file " + filename + " data was not saved.");
            return;
        }
        
        // First, write out the first line (the column headings for the CSV)
        outputFile.println("t [days], x [Au], y [Au], z [Au]");
        // Now make a loop to write the contents of the data to a CSV.
        for (int n = 0; n < positions.length; n++) {
            outputFile.println(times[n]/86400 + "," + positions[n][0]/ (148.28e9) + "," + positions[n][1]/ (148.28e9) + "," + positions[n][2]/ (148.28e9));
        }
        outputFile.close(); // close the outputFile (stream)
    } 
    
}
